# -*- coding: utf-8 -*-
"""FP_SIFON_VGG16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dfvldYNYGWzYgNs_JdoP_iYYS86xSdHg
"""

import tensorflow as tf
from datetime import datetime
import matplotlib.pyplot as plt
import os

base_dir = '/content/drive/MyDrive/Dataku/Images'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

from google.colab import drive
drive.mount('/content/drive')

os.listdir('/content/drive/MyDrive/Dataku/Images/images/train')
os.listdir('/content/drive/MyDrive/Dataku/Images/images/val')
#os.listdir('C:/Users/KOMPUTER/Downloads/Compressed/Images/train')
#os.listdir('C:/Users/KOMPUTER/Downloads/Compressed/Images/val')

# membuat direktori daun jagung sehat pada direktori data training
train_healthy_dir = os.path.join(train_dir, 'healthy')
 
# membuat direktori daun jagung blight pada direktori data training
train_blight_dir = os.path.join(train_dir, 'blight')

# membuat direktori daun jagung grey leaf spot pada direktori data training
train_spot_dir = os.path.join(train_dir, 'spot')
 
# membuat direktori daun jagung sehat pada direktori data validasi
validation_healthy_dir = os.path.join(validation_dir, 'healthy')
 
# membuat direktori daun jagung blight pada direktori data validasi
validation_blight_dir = os.path.join(validation_dir, 'blight')

# membuat direktori daun jagung grey leaf spot pada direktori data validasi
validation_spot_dir = os.path.join(validation_dir, 'spot')

from tensorflow.keras.preprocessing.image import ImageDataGenerator
 
train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')
 
test_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

train_generator = train_datagen.flow_from_directory(
        train_dir,  # direktori data latih
        target_size=(240, 240),  # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=20,
        class_mode='categorical')
 
validation_generator = test_datagen.flow_from_directory(
        validation_dir, # direktori data validasi
        target_size=(240, 240), # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=5, 
        class_mode='categorical')

from keras.applications.vgg16 import VGG16
from keras.models import Sequential, Model, load_model
from keras.layers import Conv2D, MaxPooling2D, Dense, GlobalAveragePooling2D, Activation, Dropout, Flatten, Dense, Input
from tensorflow.keras.optimizers import SGD, Adam

epochs=20
model = VGG16(include_top=False,weights="imagenet",classes=train_datagen, input_shape = (240, 240, 3))

vgg16_model = Sequential()
vgg16_model.add(model)

vgg16_model.add(Flatten())
vgg16_model.add(Dense(256,activation='relu'))
vgg16_model.add(Dropout(0.25))
vgg16_model.add(Dense(3,activation='softmax'))

adam = Adam(lr= 0.0001, decay=0.0001 / epochs)

vgg16_model.compile(optimizer = adam, loss = "categorical_crossentropy", metrics = ["accuracy"])
vgg16_model.summary()

history = vgg16_model.fit(train_generator, epochs = epochs, validation_data = validation_generator, verbose = True)

def visualize_training(history, lw = 3):
    plt.figure(figsize=(10,6))
    plt.plot(history.history['accuracy'], label = 'training', marker = '*', linewidth = lw)
    plt.plot(history.history['val_accuracy'], label = 'validation', marker = 'o', linewidth = lw)
    plt.title('Training Accuracy vs Validation Accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend(fontsize = 'x-large')
    plt.show()

    plt.figure(figsize=(10,6))
    plt.plot(history.history['loss'], label = 'training', marker = '*', linewidth = lw)
    plt.plot(history.history['val_loss'], label = 'validation', marker = 'o', linewidth = lw)
    plt.title('Training Loss vs Validation Loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend(fontsize = 'x-large')
    plt.show()
visualize_training(history)

# Evaluating the model on the training and testing set
score = model.evaluate(train_generator, verbose=0)
print("Training Accuracy: ", score[1])

score = model.evaluate(validation_generator, verbose=0)
print("Testing Accuracy: ", score[1])

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
 
  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  
  print(fn)
  if classes==1:
    print('grey leaf spot')
  elif classes==2:
    print('blight')
  else:
    print(classes)

